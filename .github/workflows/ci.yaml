name: Dotty

on:
  push:
    ## Be careful if you add or remove something here! Quoting from
    ## <https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onpushbranchestagsbranches-ignoretags-ignore>:
    ##
    ## > If you define only tags/tags-ignore or only branches/branches-ignore, the
    ## > workflow won't run for events affecting the undefined Git ref. If you
    ## > define neither tags/tags-ignore or branches/branches-ignore, the workflow
    ## > will run for events affecting either branches or tags.
    ##
    ## We want the CI to run on both branches and tags, so we should either have:
    ## - both (tags or tags-ignore) and (branches or branches-ignore),
    ## - or neither of them.
    ## But it's important to not have only one or the other.
    tags:
      - '*'
env:
  DOTTY_CI_RUN: true

# In this file, we set `--cpu-shares 4096` on every job. This might seem useless
# since it means that every container has the same weight which should be
# equivalent to doing nothing, but it turns out that OpenJDK computes
# `Runtime.getRuntime.availableProcessors` by dividing the cpu-shares value if
# it exists by 1024 (cf
# http://mail.openjdk.java.net/pipermail/hotspot-dev/2019-January/036087.html),
# so this means that we effectively run every job with 4 cores. This is much
# nicer than setting `--cpus 4` because the latter enforces CPU quotas and ends
# up slowing our jobs more than needed. It's equivalent to running the JVM with
# `-XX:ActiveProcessorCount=4`, but since our tests can spawn new JVM in many
# places, it would be very hard to ensure that this option is always passed to
# `java` (we could use the `_JAVA_OPTIONS` environment variable, but this prints
# text on stderr and so can break tests which check the output of a program).

jobs:
  publish_release:
    permissions:
      contents: write  # for actions/create-release to create a release
    runs-on: ubuntu-latest
    container:
      image: lampepfl/dotty:2024-10-18
      options: --cpu-shares 4096
      volumes:
        - ${{ github.workspace }}/../../cache/sbt:/root/.sbt
        - ${{ github.workspace }}/../../cache/ivy:/root/.ivy2/cache
        - ${{ github.workspace }}/../../cache/general:/root/.cache
    needs: build-sdk-package
    if: "github.event_name == 'push'
         && startsWith(github.event.ref, 'refs/tags/')"

    env:
      RELEASEBUILD: yes
      PGP_PW: ${{ secrets.PGP_PW }}  # PGP passphrase
      PGP_SECRET: ${{ secrets.PGP_SECRET }}  # Export your private and public PGP key to an *.asc file, take the file's contents as a string
      SONATYPE_PW: ${{ secrets.SONATYPE_PW_ORGSCALALANG }}
      SONATYPE_USER: ${{ secrets.SONATYPE_USER_ORGSCALALANG }}

    steps:
      ######################################################################################
      ## WARNING: DO NOT CHANGE THE JAVA VERSION HERE. SCALA IS DISTRIBUTED USING JAVA 8. ##
      ######################################################################################
      - name: Set JDK 8 as default
        run: echo "/usr/lib/jvm/java-8-openjdk-amd64/bin" >> $GITHUB_PATH
      - name: Reset existing repo
        run: |
          git config --global --add safe.directory /__w/scala3/scala3
          git -c "http.https://github.com/.extraheader=" fetch --recurse-submodules=no "https://github.com/scala/scala3" && git reset --hard FETCH_HEAD || true

      - name: Checkout cleanup script
        uses: actions/checkout@v4

      - name: Cleanup
        run: .github/workflows/cleanup.sh

      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Add SBT proxy repositories
        run: cp -vf .github/workflows/repositories /root/.sbt/ ; true
      # Extract the release tag
      - name: Extract the release tag
        run : echo "RELEASE_TAG=${GITHUB_REF#*refs/tags/}" >> $GITHUB_ENV

      - name: Prepare the SDKs
        shell: bash
        run : |
          prepareSDK() {
            distroSuffix="$1"
            artifactId="$2"
            artifactName="scala3-${{ env.RELEASE_TAG }}${distroSuffix}"

            downloadedArchive="./artifact.zip"
            if [ -f "${downloadedArchive}" ]; then
              rm "${downloadedArchive}"
            fi

            # Download previously prepared SDK bundle
            curl -L \
              -H "Authorization: token ${{secrets.GITHUB_TOKEN}}" \
              -H "Accept: application/vnd.github+json" \
              -o "${downloadedArchive}" \
              --retry 5 --retry-delay 10 --retry-connrefused \
              --max-time 600 --connect-timeout 60  \
              https://api.github.com/repos/scala/scala3/actions/artifacts/${artifactId}/zip

            # Repackage content of .zip to .tar.gz and prepare digest
            tmpDir="./archive-tmp-dir"
            if [ -d "${tmpDir}" ]; then
              rm -r "${tmpDir}"
            fi
            mkdir "${tmpDir}"
            unzip "${downloadedArchive}" -d "${tmpDir}"

            mv "${downloadedArchive}" "./${artifactName}.zip"
            tar -czf "${artifactName}.tar.gz" -C "${tmpDir}" .

            # Caluclate SHA for each of archive files
            for file in "${artifactName}.zip" "${artifactName}.tar.gz"; do
              sha256sum "${file}" > "${file}.sha256"
            done
          }
          prepareSDK "" ${{needs.build-sdk-package.outputs.universal-id}}
          prepareSDK "-aarch64-pc-linux"     ${{needs.build-sdk-package.outputs.linux-aarch64-id}}
          prepareSDK "-x86_64-pc-linux"      ${{needs.build-sdk-package.outputs.linux-x86_64-id}}
          prepareSDK "-aarch64-apple-darwin" ${{needs.build-sdk-package.outputs.mac-aarch64-id}}
          prepareSDK "-x86_64-apple-darwin"  ${{needs.build-sdk-package.outputs.mac-x86_64-id}}
          prepareSDK "-x86_64-pc-win32"      ${{needs.build-sdk-package.outputs.win-x86_64-id}}

      # Create the GitHub release
      - name: Create GitHub Release
        id: create_gh_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body_path: ./changelogs/${{ env.RELEASE_TAG }}.md
          draft: true
          prerelease: ${{ contains(env.RELEASE_TAG, '-') }}

      # The following steps are generated using template:
      # def template(distribution: String, suffix: String) =
      #   def upload(kind: String, path: String, contentType: String) =
      #     s"""- name: Upload $kind to GitHub Release ($distribution)
      #         uses: actions/upload-release-asset@v1
      #         env:
      #           GITHUB_TOKEN: $${{ secrets.GITHUB_TOKEN }}
      #         with:
      #           upload_url: $${{ steps.create_gh_release.outputs.upload_url }}
      #           asset_path: ./${path}
      #           asset_name: ${path}
      #           asset_content_type: ${contentType}"""
      #   val filename = s"scala3-$${{ env.RELEASE_TAG }}${suffix}"
      #   s"""
      #       # $distribution
      #       ${upload("zip archive", s"$filename.zip", "application/zip")}
      #       ${upload("zip archive SHA", s"$filename.zip.sha256", "text/plain")}
      #       ${upload("tar.gz archive", s"$filename.tar.gz", "application/gzip")}
      #       ${upload("tar.gz archive SHA", s"$filename.tar.gz.sha256", "text/plain")}
      # """

      # @main def gen =
      #   Seq(
      #     template("Universal", ""),
      #     template("Linux x86-64", "-x86_64-pc-linux"),
      #     template("Linux aarch64", "-aarch64-pc-linux"),
      #     template("Mac x86-64", "-x86_64-apple-darwin"),
      #     template("Mac aarch64", "-aarch64-apple-darwin"),
      #     template("Windows x86_64", "-x86_64-pc-win32")
      #   ).foreach(println)
      # Universal
      - name: Upload zip archive to GitHub Release (Universal)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_gh_release.outputs.upload_url }}
          asset_path: ./scala3-${{ env.RELEASE_TAG }}.zip
          asset_name: scala3-${{ env.RELEASE_TAG }}.zip
          asset_content_type: application/zip
      - name: Upload zip archive SHA to GitHub Release (Universal)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_gh_release.outputs.upload_url }}
          asset_path: ./scala3-${{ env.RELEASE_TAG }}.zip.sha256
          asset_name: scala3-${{ env.RELEASE_TAG }}.zip.sha256
          asset_content_type: text/plain
      - name: Upload tar.gz archive to GitHub Release (Universal)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_gh_release.outputs.upload_url }}
          asset_path: ./scala3-${{ env.RELEASE_TAG }}.tar.gz
          asset_name: scala3-${{ env.RELEASE_TAG }}.tar.gz
          asset_content_type: application/gzip
      - name: Upload tar.gz archive SHA to GitHub Release (Universal)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_gh_release.outputs.upload_url }}
          asset_path: ./scala3-${{ env.RELEASE_TAG }}.tar.gz.sha256
          asset_name: scala3-${{ env.RELEASE_TAG }}.tar.gz.sha256
          asset_content_type: text/plain


      # Linux x86-64
      - name: Upload zip archive to GitHub Release (Linux x86-64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_gh_release.outputs.upload_url }}
          asset_path: ./scala3-${{ env.RELEASE_TAG }}-x86_64-pc-linux.zip
          asset_name: scala3-${{ env.RELEASE_TAG }}-x86_64-pc-linux.zip
          asset_content_type: application/zip
      - name: Upload zip archive SHA to GitHub Release (Linux x86-64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_gh_release.outputs.upload_url }}
          asset_path: ./scala3-${{ env.RELEASE_TAG }}-x86_64-pc-linux.zip.sha256
          asset_name: scala3-${{ env.RELEASE_TAG }}-x86_64-pc-linux.zip.sha256
          asset_content_type: text/plain
      - name: Upload tar.gz archive to GitHub Release (Linux x86-64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_gh_release.outputs.upload_url }}
          asset_path: ./scala3-${{ env.RELEASE_TAG }}-x86_64-pc-linux.tar.gz
          asset_name: scala3-${{ env.RELEASE_TAG }}-x86_64-pc-linux.tar.gz
          asset_content_type: application/gzip
      - name: Upload tar.gz archive SHA to GitHub Release (Linux x86-64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_gh_release.outputs.upload_url }}
          asset_path: ./scala3-${{ env.RELEASE_TAG }}-x86_64-pc-linux.tar.gz.sha256
          asset_name: scala3-${{ env.RELEASE_TAG }}-x86_64-pc-linux.tar.gz.sha256
          asset_content_type: text/plain


      # Linux aarch64
      - name: Upload zip archive to GitHub Release (Linux aarch64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_gh_release.outputs.upload_url }}
          asset_path: ./scala3-${{ env.RELEASE_TAG }}-aarch64-pc-linux.zip
          asset_name: scala3-${{ env.RELEASE_TAG }}-aarch64-pc-linux.zip
          asset_content_type: application/zip
      - name: Upload zip archive SHA to GitHub Release (Linux aarch64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_gh_release.outputs.upload_url }}
          asset_path: ./scala3-${{ env.RELEASE_TAG }}-aarch64-pc-linux.zip.sha256
          asset_name: scala3-${{ env.RELEASE_TAG }}-aarch64-pc-linux.zip.sha256
          asset_content_type: text/plain
      - name: Upload tar.gz archive to GitHub Release (Linux aarch64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_gh_release.outputs.upload_url }}
          asset_path: ./scala3-${{ env.RELEASE_TAG }}-aarch64-pc-linux.tar.gz
          asset_name: scala3-${{ env.RELEASE_TAG }}-aarch64-pc-linux.tar.gz
          asset_content_type: application/gzip
      - name: Upload tar.gz archive SHA to GitHub Release (Linux aarch64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_gh_release.outputs.upload_url }}
          asset_path: ./scala3-${{ env.RELEASE_TAG }}-aarch64-pc-linux.tar.gz.sha256
          asset_name: scala3-${{ env.RELEASE_TAG }}-aarch64-pc-linux.tar.gz.sha256
          asset_content_type: text/plain


      # Mac x86-64
      - name: Upload zip archive to GitHub Release (Mac x86-64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_gh_release.outputs.upload_url }}
          asset_path: ./scala3-${{ env.RELEASE_TAG }}-x86_64-apple-darwin.zip
          asset_name: scala3-${{ env.RELEASE_TAG }}-x86_64-apple-darwin.zip
          asset_content_type: application/zip
      - name: Upload zip archive SHA to GitHub Release (Mac x86-64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_gh_release.outputs.upload_url }}
          asset_path: ./scala3-${{ env.RELEASE_TAG }}-x86_64-apple-darwin.zip.sha256
          asset_name: scala3-${{ env.RELEASE_TAG }}-x86_64-apple-darwin.zip.sha256
          asset_content_type: text/plain
      - name: Upload tar.gz archive to GitHub Release (Mac x86-64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_gh_release.outputs.upload_url }}
          asset_path: ./scala3-${{ env.RELEASE_TAG }}-x86_64-apple-darwin.tar.gz
          asset_name: scala3-${{ env.RELEASE_TAG }}-x86_64-apple-darwin.tar.gz
          asset_content_type: application/gzip
      - name: Upload tar.gz archive SHA to GitHub Release (Mac x86-64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_gh_release.outputs.upload_url }}
          asset_path: ./scala3-${{ env.RELEASE_TAG }}-x86_64-apple-darwin.tar.gz.sha256
          asset_name: scala3-${{ env.RELEASE_TAG }}-x86_64-apple-darwin.tar.gz.sha256
          asset_content_type: text/plain


      # Mac aarch64
      - name: Upload zip archive to GitHub Release (Mac aarch64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_gh_release.outputs.upload_url }}
          asset_path: ./scala3-${{ env.RELEASE_TAG }}-aarch64-apple-darwin.zip
          asset_name: scala3-${{ env.RELEASE_TAG }}-aarch64-apple-darwin.zip
          asset_content_type: application/zip
      - name: Upload zip archive SHA to GitHub Release (Mac aarch64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_gh_release.outputs.upload_url }}
          asset_path: ./scala3-${{ env.RELEASE_TAG }}-aarch64-apple-darwin.zip.sha256
          asset_name: scala3-${{ env.RELEASE_TAG }}-aarch64-apple-darwin.zip.sha256
          asset_content_type: text/plain
      - name: Upload tar.gz archive to GitHub Release (Mac aarch64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_gh_release.outputs.upload_url }}
          asset_path: ./scala3-${{ env.RELEASE_TAG }}-aarch64-apple-darwin.tar.gz
          asset_name: scala3-${{ env.RELEASE_TAG }}-aarch64-apple-darwin.tar.gz
          asset_content_type: application/gzip
      - name: Upload tar.gz archive SHA to GitHub Release (Mac aarch64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_gh_release.outputs.upload_url }}
          asset_path: ./scala3-${{ env.RELEASE_TAG }}-aarch64-apple-darwin.tar.gz.sha256
          asset_name: scala3-${{ env.RELEASE_TAG }}-aarch64-apple-darwin.tar.gz.sha256
          asset_content_type: text/plain


      # Windows x86_64
      - name: Upload zip archive to GitHub Release (Windows x86_64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_gh_release.outputs.upload_url }}
          asset_path: ./scala3-${{ env.RELEASE_TAG }}-x86_64-pc-win32.zip
          asset_name: scala3-${{ env.RELEASE_TAG }}-x86_64-pc-win32.zip
          asset_content_type: application/zip
      - name: Upload zip archive SHA to GitHub Release (Windows x86_64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_gh_release.outputs.upload_url }}
          asset_path: ./scala3-${{ env.RELEASE_TAG }}-x86_64-pc-win32.zip.sha256
          asset_name: scala3-${{ env.RELEASE_TAG }}-x86_64-pc-win32.zip.sha256
          asset_content_type: text/plain
      - name: Upload tar.gz archive to GitHub Release (Windows x86_64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_gh_release.outputs.upload_url }}
          asset_path: ./scala3-${{ env.RELEASE_TAG }}-x86_64-pc-win32.tar.gz
          asset_name: scala3-${{ env.RELEASE_TAG }}-x86_64-pc-win32.tar.gz
          asset_content_type: application/gzip
      - name: Upload tar.gz archive SHA to GitHub Release (Windows x86_64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_gh_release.outputs.upload_url }}
          asset_path: ./scala3-${{ env.RELEASE_TAG }}-x86_64-pc-win32.tar.gz.sha256
          asset_name: scala3-${{ env.RELEASE_TAG }}-x86_64-pc-win32.tar.gz.sha256
          asset_content_type: text/plain

      - name: Publish Release
        run: ./project/scripts/sbtPublish

  build-sdk-package:
    uses: ./.github/workflows/build-sdk.yml
    if:
      (github.event_name == 'pull_request' && !contains(github.event.pull_request.body, '[skip ci]')) ||
      (github.event_name == 'workflow_dispatch' && github.repository == 'scala/scala3') ||
      (github.event_name == 'schedule' && github.repository == 'scala/scala3') ||
      github.event_name == 'push' ||
      github.event_name == 'merge_group'
    with:
      java-version: 8
